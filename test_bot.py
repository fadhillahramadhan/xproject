#!/usr/bin/env python3
"""
Test script for Murphy's Crypto Trading Bot
Run this to verify all components work before deployment
"""

import sys
import os
from dotenv import load_dotenv

def test_imports():
    """Test if all required modules can be imported"""
    print("üîç Testing imports...")
    
    try:
        import pandas as pd
        print("‚úÖ pandas imported successfully")
        
        import numpy as np
        print("‚úÖ numpy imported successfully")
        
        import ccxt
        print("‚úÖ ccxt imported successfully")
        
        import ta
        print("‚úÖ ta (technical analysis) imported successfully")
        
        import matplotlib.pyplot as plt
        print("‚úÖ matplotlib imported successfully")
        
        from telegram import Update
        from telegram.ext import Application
        print("‚úÖ python-telegram-bot imported successfully")
        
        from technical_analyzer import MurphyTechnicalAnalyzer
        print("‚úÖ Custom technical analyzer imported successfully")
        
        from chart_generator import TechnicalChartGenerator
        print("‚úÖ Custom chart generator imported successfully")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_exchange_connection():
    """Test if we can connect to exchange"""
    print("\nüîç Testing exchange connection...")
    
    try:
        import ccxt
        exchange = ccxt.binance()
        
        # Test public endpoint
        ticker = exchange.fetch_ticker('BTC/USDT')
        print(f"‚úÖ Exchange connection successful - BTC/USDT: ${ticker['last']}")
        return True
        
    except Exception as e:
        print(f"‚ùå Exchange connection failed: {e}")
        return False

def test_technical_analysis():
    """Test technical analysis functionality"""
    print("\nüîç Testing technical analysis...")
    
    try:
        from technical_analyzer import MurphyTechnicalAnalyzer
        
        analyzer = MurphyTechnicalAnalyzer()
        
        # Test data fetch
        df = analyzer.get_ohlcv_data('BTC/USDT', '1d', 50)
        if not df.empty:
            print(f"‚úÖ Data fetch successful - {len(df)} candles retrieved")
            
            # Test indicators
            df = analyzer.calculate_indicators(df)
            print("‚úÖ Technical indicators calculated")
            
            # Test signals
            signals = analyzer.generate_signals(df)
            print(f"‚úÖ Signal generation successful - Signal: {signals['signal']}")
            
            return True
        else:
            print("‚ùå No data retrieved")
            return False
            
    except Exception as e:
        print(f"‚ùå Technical analysis test failed: {e}")
        return False

def test_chart_generation():
    """Test chart generation"""
    print("\nüîç Testing chart generation...")
    
    try:
        from technical_analyzer import MurphyTechnicalAnalyzer
        from chart_generator import TechnicalChartGenerator
        
        analyzer = MurphyTechnicalAnalyzer()
        chart_gen = TechnicalChartGenerator()
        
        # Get sample data
        df = analyzer.get_ohlcv_data('BTC/USDT', '4h', 100)
        df = analyzer.calculate_indicators(df)
        signals = analyzer.generate_signals(df)
        
        # Generate chart
        chart_buffer = chart_gen.create_analysis_chart(df, signals, 'BTC/USDT')
        
        if chart_buffer:
            print("‚úÖ Chart generation successful")
            return True
        else:
            print("‚ùå Chart generation failed")
            return False
            
    except Exception as e:
        print(f"‚ùå Chart generation test failed: {e}")
        return False

def test_config():
    """Test configuration loading"""
    print("\nüîç Testing configuration...")
    
    try:
        load_dotenv('config.env')
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if bot_token and bot_token != 'YOUR_TELEGRAM_BOT_TOKEN_HERE':
            print("‚úÖ Telegram bot token configured")
        else:
            print("‚ö†Ô∏è  Telegram bot token not configured (use config.env)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Murphy's Crypto Trading Bot - Component Tests\n")
    
    tests = [
        test_imports,
        test_exchange_connection,
        test_technical_analysis,
        test_chart_generation,
        test_config
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} crashed: {e}")
            failed += 1
    
    print(f"\nüìä Test Results:")
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failed}")
    
    if failed == 0:
        print("\nüéâ All tests passed! Your bot is ready for deployment.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {failed} test(s) failed. Please fix issues before deployment.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 